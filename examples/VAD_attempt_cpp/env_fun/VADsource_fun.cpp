/*****************************************************************************

  VADsource_fun.cpp

  Environment Process for the VAD example

  Note: source process

  Author: F. Herrera
  Institution: KTH
  Deparment: ICT/ES
  Date: 2014 February

 *****************************************************************************/

#include "kista.hpp"

#include "../compacted_types.hpp"

#include "../adse_defines.h"
#include "../fun/vad.h"

#include "../fun/typedef.h"

#define TASK_NAME TASK_VADsource

#define INFINITE_TEST_BENCH

extern "C"
void VADsource_fun() {

//------------------------------------------------
// Environment initialization code
// (to be hidden or autogenerated in the future)
//------------------------------------------------

	// retrieve references to the channels used by the task for communication
	
	// output channel references
  	IO_FIFO_BUFFER_MSG_REF(pout_r_h_1,EDGE_r_h_1);
	IO_FIFO_BUFFER_MSG_REF(pout_r_h_2,EDGE_r_h_2);
	IO_FIFO_BUFFER_MSG_REF(pout_r_l,EDGE_r_l);
	IO_FIFO_BUFFER_SHORT_REF(pout_scal_acf_1,EDGE_scal_acf_1);	
	IO_FIFO_BUFFER_SHORT_REF(pout_scal_acf_2,EDGE_scal_acf_2);
	IO_FIFO_BUFFER_MSG_REF(pout_rc,EDGE_rc_1);		
	IO_FIFO_BUFFER_SHORT_REF(pout_pitch,EDGE_pitch);	

//--------------------------
// Task initialization code
//--------------------------

	r_t r_h_comp;
	r_t r_l_comp;
	rc_t rc_comp;

	short r_h[8][9] = {{0, 0, 0, 0, 0, 0, 0, 0, 0},
					   {10, 10, 10, 10, 10, 10, 10, 10, 10},
					   {0, 10, 0, 10, 0, 10, 0, 10, 0},
					   {10, 0, 10, 0, 10, 0, 10, 0, 10},
					   {10, -10, 10, -10, 10, -10, 10, -10, 10},
					   {100, 100, 100, 100, 100, 100, 100, 100, 100},
					   {-10, -10, -10, -10, -10, -10, -10, -10, -10},
					   {0, 0, 0, 0, 0, 0, 0, 0, 0}};

	short r_l[8][9] = {{0, 0, 0, 0, 0, 0, 0, 0, 0},
					   {0, 0, 0, 0, 0, 0, 0, 0, 0},
					   {0, 0, 0, 0, 0, 0, 0, 0, 0},
					   {10, 0, 10, 0, 10, 0, 10, 0, 10},
					   {10, -10, 10, -10, 10, -10, 10, -10, 10},
					   {0, 0, 0, 0, 0, 0, 0, 0, 0},
					   {-10, -10, -10, -10, -10, -10, -10, -10, -10},
					   {0, 0, 0, 0, 0, 0, 0, 0, 0}};
	short scal_acf[8] = {0, 5, 10, 5, 0, 5, 5, 10};
	short rc[8][4] = {{10, -10, 10, 0},
					  {-10, 10, -10, 0},
					  {-10, 10, -10, 0},
					  {100, 100, 100, 0},
					  {100, 100, 100, 0},
					  {100, 100, 100, 0},
					  {-10, -10, -10, 0},
					  {-10, -10, -10, 0}};
	short ptch[8] = {0, 0, 0, 1, 1, 1, 0, 0};


	unsigned int i;
	unsigned int k ;

	k = 0;

#ifdef INFINITE_TEST_BENCH
	while(true) {
#else			
	for(k=0;k<8;k++) {
#endif

//--------------------------
// Task code
//--------------------------

		PRINT_TASK(TASK_NAME,"send");

		for (i=0; i<9; i++) {
			r_h_comp.item[i] = r_h[k][i];
			r_l_comp.item[i] = r_l[k][i];
		}
		
//cout << "ANTES CONTENT msg_r_h_1: "		 << msg_r_h_1 << endl;

		message_t msg_r_h_1(&r_h_comp,sizeof(r_h_comp));

//cout << "DESPUES CONTENT msg_r_h_1: "		 << msg_r_h_1 << endl;
		
		pout_r_h_1->write(msg_r_h_1);

		message_t msg_r_h_2(&r_h_comp,sizeof(r_h_comp));
		pout_r_h_2->write(msg_r_h_2);
		
		message_t msg_r_l(&r_l_comp,sizeof(r_l_comp));
		pout_r_l->write(msg_r_l);
			
		pout_scal_acf_1->write(scal_acf[k]);
		pout_scal_acf_2->write(scal_acf[k]);

		for (i=0; i<4; i++) {
			rc_comp.item[i] = rc[k][i];
		}
		message_t  msg_rc(&rc_comp, sizeof(rc_comp));
		pout_rc->write(msg_rc);
		
		pout_pitch->write(ptch[k]);
					
#ifdef INFINITE_TEST_BENCH			
			k = (k+1)%8;
#endif
	}
}
