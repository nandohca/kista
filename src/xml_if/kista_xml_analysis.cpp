/*****************************************************************************

  kista_xml_analysis.cpp
  
   Configuration of KisTA analysis from kista-xml.
  
   This file belongs to the kista library
   All rights reserved by the authors (until further License definition)

  Author: F. Herrera
  Institution: KTH
  Deparment:   Electronic Systems
  Date: 2014 April

 *****************************************************************************/

#ifndef _KISTA_XML_ANALYSIS_CPP
#define _KISTA_XML_ANALYSIS_CPP

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <libxml/xmlmemory.h>
#include <libxml/parser.h>

#include <libxml/xmlschemas.h>

#include <vector>

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <libxml/xmlmemory.h>
#include <libxml/parser.h>
#include <libxml/xpath.h>



xmlNodeSetPtr getTraceRTOS(xmlDocPtr doc) {
	xmlNodeSetPtr nodeset;
	xmlXPathObjectPtr  XPathObjectPtr;
	XPathObjectPtr = getNodeSet(doc,(xmlChar *)"/system/kista_configuration/analysis/trace_rtos");
	if(XPathObjectPtr==NULL) {
		if(global_kista_xml_verbosity) {	
			SC_REPORT_WARNING("KisTA-XML","No RTOS tracing stated by XML input.");
		}
		return NULL;
	}
	nodeset = XPathObjectPtr->nodesetval;
	return nodeset;
}

unsigned int getNumberOfTraceRTOS(xmlDocPtr doc) {
	xmlNodeSetPtr setTraceRTOSnodes;
	setTraceRTOSnodes=getTraceRTOS(doc);
	if(setTraceRTOSnodes==NULL) return 0;
	else return setTraceRTOSnodes->nodeNr;
}

bool get_configured_static_sched_analysis(xmlDocPtr doc) {

	get_configured_boolean_option(doc,
								"/system/kista_configuration/analysis/static_sched_analysis", // where to find boolean property
								"if settled, (default) available static analysis common and specific for the configured scheduling policy are applied", // description of the boolean property
								true // default value if not found in XML system description
								);
}

bool get_configured_worst_case_communication(xmlDocPtr doc) {

	get_configured_boolean_option(doc,
								"/system/kista_configuration/analysis/worst_case_communication", // where to find boolean property
								"if settled, (default) worst case communication times are used, otherwise, current communication times", // description of the boolean property
								true // default value if not found in XML system description
								);
}


void configure_kista_analysis(xmlDocPtr doc) {
	
	xmlNodeSetPtr	setTraceRTOSnodes;
	xmlChar 		*RTOSName;
	std::string		RTOSName_std_str;	
	
	xmlChar 		*RTOSTraceFileName;
	std::string		RTOSTraceFileNamestd_str;	
	
	std::string		rpt_msg;
	unsigned int j;
	
	// ------------------------------------------------------------------------
	// Applies static analysis of schedulers at the end of elaboration or not
	// ------------------------------------------------------------------------
	if ( get_configured_static_sched_analysis(doc) ) {
		enable_sched_static_analysis();
	} else {
		disable_sched_static_analysis();
	}
	
	// ---------------------------------------------
	// Using WCCT or Current communication times
	// ---------------------------------------------	
	if ( get_configured_worst_case_communication(doc) ) {
		enable_worst_case_communication();
	} else {
		disable_worst_case_communication();
	}
	
	// ---------------------------------------------
	// RTOS TRACING
	// ---------------------------------------------	
	setTraceRTOSnodes = getTraceRTOS(doc);
	// setTasknodes should not be NULL here because we have already checked that there were nodes in the tree
		
	for(j=0; j< getNumberOfTraceRTOS(doc) ; j++) {
	   
	   RTOSName = xmlGetValueGen(setTraceRTOSnodes->nodeTab[j],(xmlChar *)"name");

	   RTOSTraceFileName = xmlGetValueGen(setTraceRTOSnodes->nodeTab[j],(xmlChar *)"file");

	   if(RTOSName==NULL) {
			rpt_msg = "While parsing the Analysis Description file.";
			rpt_msg += "RTOS name for rtos_trace was not given.";
			SC_REPORT_ERROR("KisTA-XML",rpt_msg.c_str());
		} else {
			if(global_kista_xml_verbosity) {
				rpt_msg = "Setting Tracing of Utilizations for RTOS ";
				rpt_msg += (const char *)RTOSName;
				SC_REPORT_INFO("KisTA-XML",rpt_msg.c_str());
			}
				
			// Sets the tracing
			RTOSName_std_str = (const char *)RTOSName;
			if(RTOSTraceFileName!=NULL) { // using the user provided name for the trace file
				RTOSTraceFileNamestd_str = (const char *)RTOSTraceFileName;
				scheds_by_name[RTOSName_std_str]->trace_utilizations(RTOSTraceFileNamestd_str);				
			} else { // using the name automatically generated by KisTA for the trace file
				scheds_by_name[RTOSName_std_str]->trace_utilizations();
			}
		}
	}	

}



#endif


