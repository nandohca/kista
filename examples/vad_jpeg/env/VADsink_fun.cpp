/*****************************************************************************

  VADflag_fun.cpp

  Environment Process for the VAD example
  
  Note: sink process

  Author: F. Herrera
  Institution: KTH
  Deparment: ICT/ES
  Date: 2014 February

 *****************************************************************************/

#include "kista.hpp"

#include "../vad/compacted_types.hpp"

#include "../vad/adse_defines.h"
#include "../vad/fun/vad.h"

#include "../vad/fun/typedef.h"

#define TASK_NAME TASK_VADflag

#define _CHECK_RESULT

extern "C"
void VADsink_fun() {
// --------------------------
// init and state section
// --------------------------
	// Declaration and initialization of internal variables
	short in_vad;

	short expected_vad[8] = {0,0,0,0,1,1,0,0};
	
	unsigned int i = 0;
	
//------------------------------------------------
// Environment initialization code
// (to be hidden or autogenerated in the future)
//------------------------------------------------

  	IO_FIFO_BUFFER_SHORT_REF(pin_vad,EDGE_vad);

//--------------------------
// Task initialization code
//--------------------------
// none

	while(true) {
//--------------
// Task code
//--------------
		pin_vad->read(in_vad);

		PRINT_TASK(TASK_NAME, ": recv (" << in_vad << ")");

#ifdef _CHECK_RESULT
		std::string msg;
		if(in_vad!=expected_vad[i]) {
			set_functional_failure();
		}
		if(i<7) i++;
		else i=0;
#endif
	}
	
}
	


